# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bn2d9tOLeGOStHYFAlUvs3G6YZ45bn8M
"""

# compare ensemble to each baseline classifier
from os import get_terminal_size
from numpy import mean
from numpy import std
from sklearn.datasets import make_classification
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import StackingClassifier
from matplotlib import pyplot
import collections
import csv

# from google.colab import files
# import io
import pandas as pd

TRAIN_FILE = "3_fold/train_0.csv"
TEST_FILE = "3_fold/test_0.csv"
OUT_FILE = "stack_out.csv"
CLASS_MAP = {"HQ": 0, "LQ_CLOSE": 1, "LQ_EDIT": 2}


# Upload the dataset
# Clean columns for null values
# Select training variables
# Select labels


def get_data(filename):

    """Colab Version
    uploaded = files.upload()
    train_file = pd.read_csv(io.BytesIO(uploaded['train.csv']))"""

    data = pd.read_csv(filename)
    data = data[data.asker_reputation != 0]
    data = data[data.views != 0]

    data["asker_creation_date"].fillna(0, inplace=True)

    data["asker_reputation"].fillna(0, inplace=True)

    data["views"].fillna(0, inplace=True)

    data["Text-Code Ratio"].fillna(0, inplace=True)

    data["Text"].fillna(0, inplace=True)

    data["Code"].fillna(0, inplace=True)
    data["Asker_Question_Year"].fillna(0, inplace=True)

    X = data.loc[
        :,
        [
            "asker_reputation",
            "views",
            "Text-Code Ratio",
            "Text",
            "Code",
            "Asker_Question_Year",
        ],
    ].values

    y = data.loc[:, ["Y"]].values

    return X, y


# Define machine learning models


# get a list of models to evaluate
def get_models():
    models = dict()
    models["lr"] = LogisticRegression()
    models["knn"] = KNeighborsClassifier()
    models["cart"] = DecisionTreeClassifier()
    models["svc"] = SVC()
    return models


# evaluate a give model using cross-validation
def train_model(model, X, y):
    split = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
    train_scores = cross_val_score(
        model, X, y, scoring="accuracy", cv=split, n_jobs=-1, error_score="raise"
    )
    return train_scores


# define dataset
X, y = get_data(TRAIN_FILE)
testX, testY = get_data(TEST_FILE)
# get the models to evaluate
models = get_models()
# evaluate the models and store results
results, model_names = list(), list()
for name, model in models.items():
    print(f"Training {name}")
    model.fit(X, y)

predictions = collections.defaultdict(list)
predictions["Y"] = list(testY.squeeze())
for name, model in models.items():
    predictions[name] = model.predict(testX)

with open(OUT_FILE, "w") as out_file:
    keys = list(predictions.keys())
    writer = csv.writer(out_file)
    writer.writerow(["num"] + keys)
    for i in range(len(testY)):
        # I am so sorry to whoever reads this
        to_write = [CLASS_MAP[predictions[key][i]] for key in keys]
        to_write = [i] + to_write
        writer.writerow(to_write)
